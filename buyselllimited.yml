---

- name: buy predicted coin(s)
  hosts: all
  gather_facts: false
  vars_files:
     - ./defaults/main.yml
     - ./defaults/developer.yml
  vars:
    accelerator: false
    average_zero: false
    ba_trade_dict: "{{ ba_coin_buy | ansible.builtin.combine(ba_api_key) }}"
  tasks:

    - name: "get prediction action for coin {{ ba_coin }}"
      ansible.builtin.uri:
        url: "{{ ba_api_url }}/coin_action"
        method: POST
        validate_certs: "{{ ba_validate_certs }}"
        body_format: json
        body: "{{ ba_coin_action | to_json }}"
        return_content: true
      register: _action
    
    - name: "end play if prediction is 'hold'"
      ansible.builtin.meta: end_play
      when: _action.json[ba_coin] == 'Hold' and not dev_sell and not dev_buy

    - name: cache total qty
      ansible.builtin.set_fact:
        cached_total_qty: "{{ total_qty | float }}"
        cached_average: "{{ average | float }}"
    
    - name: "get current price"
      ansible.builtin.uri:
        url: "{{ ba_api_url }}/price"
        body: "{{ ba_coin_buy | to_json }}"
        method: POST
        validate_certs: "{{ ba_validate_certs }}"
        body_format: json
        return_content: true
      register: _current_price

    - name: BUY block
      tags: [buy]
      when: _action.json[ba_coin] == 'Buy' or dev_buy
      block:

      - name: end play if current price to high, max buy limit or buffer reached
        ansible.builtin.meta: end_play
        when: (average | float != 0 and 
          (_current_price.json | float / average | float) * 100 - 100 >= high_buy_limit)
          or (best_buy_price | float != 0 and 
          (_current_price.json | float / best_buy_price | float) * 100 - 100 >= best_buy_price_max_diff) 
          or (max_buy_usd | float != 0 and 
          (_current_price.json | float * total_qty | float) >= max_buy_usd | float )
          or (average | float != 0 and buy_buffered_usd != 0 and 
          (_current_price.json | float * total_qty | float) >= buy_buffered_usd | float  and
          (average | float / _current_price.json | float) * 100 - 100 <= buy_buffered_gap | float)

      - name: calculate buy accelerator
        ansible.builtin.set_fact:
          ba_usd: "{{ ba_usd * buy_multiplicator }}"
        when: average | float != 0 and _current_price.json | float != 0 and 
          (average | float / _current_price.json | float) * 100 - 100 >= low_accelerate_buy_limit
          
      - name: order if prediction is buy
        ansible.builtin.uri:
          url: "{{ ba_api_url }}/buy"
          body: "{{ ba_trade_dict | to_json }}"
          method: POST
          validate_certs: "{{ ba_validate_certs }}"
          body_format: json
          return_content: true
        register: _buy
        no_log: true
      
      - name: buy order result
        ansible.builtin.debug:
          var: _buy
              
      - name: "end play if 'insufficient balance'"
        ansible.builtin.meta: end_play
        when: _buy.json['msg'] is defined 
          and _buy.json['msg'] | string is ansible.builtin.search("insufficient balance")
      
      - name: prepare cacheable variables when buy
        ansible.builtin.set_fact:
          last_buy_date: "{{ _buy['date'] }}"
          last_price_buy: "{{ _buy['json']['cummulativeQuoteQty'] | float / _buy['json']['executedQty'] | float }}"
          last_qty_buy:  "{{ _buy['json']['executedQty'] | float }}"
          total_qty: "{{ total_qty | float + _buy['json']['executedQty'] | float }}"
          cacheable: true
      
      - name: compute new average when buy and average is zero
        ansible.builtin.set_fact:
          average: "{{ last_price_buy | float }}"
          average_zero: true
          cacheable: true
        when: average | float == 0

      - name: compute new average when buy
        ansible.builtin.set_fact:
          average: "{{ ( cached_total_qty | float * average | float + last_qty_buy | float * last_price_buy | float) / total_qty | float }}"
          cacheable: true
        when: not average_zero
      
      - name: compute best buy price
        ansible.builtin.set_fact:
          best_buy_price: "{{ last_price_buy | float }}"
          cacheable: true
        when: best_buy_price | float == 0 or best_buy_price | float > last_price_buy | float

    - name: SELL block
      tags: [sell]
      when: _action.json[ba_coin] == 'Sell' or dev_sell
      block:

      - name: calculate sell all option
        ansible.builtin.set_fact:
          sell_all: true
        when:  average | float != 0 and 
          (_current_price.json | float / average | float) * 100 - 100 >= high_sell_limit

      - name: sell all if prediction is sell and high_sell_limit reached
        ansible.builtin.uri:
          url: "{{ ba_api_url }}/sellall"
          body: "{{ ba_trade_dict | to_json }}"
          method: POST
          validate_certs: "{{ ba_validate_certs }}"
          body_format: json
          return_content: true
        register: _sell
        when: sell_all 
        no_log: true
      
      - name: sell all order result
        ansible.builtin.debug:
          var: _sell
        when: sell_all 
      
      - name: end play if sell all and content is empty
        ansible.builtin.meta: end_play
        when: sell_all
          and _sell['content'] is defined and _sell['content'] == 'empty'

      - name: set cacheable variables for sell all
        set_fact:
          average: 0
          total_qty: "{{ cached_total_qty | float - _sell['json']['executedQty'] | float }}"
          last_sell_date: "{{ _sell['date'] }}"
          last_sell_price: "{{ _sell['json']['cummulativeQuoteQty'] | float / _sell['json']['executedQty'] | float }}"
          last_sell_qty: "{{ _sell['json']['executedQty'] }}"
          total_profit: "{{ total_profit | float + ( _sell['json']['cummulativeQuoteQty'] | float - cached_average | float * _sell['json']['executedQty'] | float) }}"
          best_buy_price: 0.0
          cacheable: true
        when: sell_all
        
      - name: calculate sell part option
        ansible.builtin.set_fact:
          sell_part: true
          ba_usd: "{{ ba_usd | float * sell_multiplicator | float }}"
        when:  average | float != 0 and not sell_all and
          (_current_price.json | float / average | float) * 100 - 100 >= low_sell_limit 

      - name: order part if prediction is sell
        ansible.builtin.uri:
          url: "{{ ba_api_url }}/sell"
          body: "{{ ba_trade_dict | to_json }}"
          method: POST
          validate_certs: "{{ ba_validate_certs }}"
          body_format: json
          return_content: true
        register: _sell
        when: sell_part
        no_log: true
      
      - name: sell part order result
        ansible.builtin.debug:
          var: _sell
        when: sell_part

      - name: "end play if 'insufficient balance'"
        ansible.builtin.meta: end_play
        when: sell_part
          and _sell.json['msg'] is defined 
          and _sell.json['msg'] | string is ansible.builtin.search("insufficient balance")
      
      # average untouched because otherwise 
      # total_profit calculation is wrong 
      - name: set cacheable variables for sell part
        set_fact:
          total_qty: "{{ cached_total_qty | float - _sell['json']['executedQty'] | float }}"
          last_sell_date: "{{ _sell['date'] }}"
          last_sell_price: "{{ _sell['json']['cummulativeQuoteQty'] | float / _sell['json']['executedQty'] | float }}"
          last_sell_qty: "{{ _sell['json']['executedQty'] }}"
          total_profit: "{{ total_profit | float + ( _sell['json']['cummulativeQuoteQty'] | float - cached_average | float * _sell['json']['executedQty'] | float) }}"
          best_buy_price: 0.0
          cacheable: true
        when: sell_part

      # reset average and best_buy_price
      - name: reset average when total_qty is too low to sell
        ansible.builtin.set_fact:
          average: 0
          best_buy_price: 0
        when: total_qty | float * _current_price.json | float < min_buy_usd
