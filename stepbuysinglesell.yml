---

- name: buy predicted coin(s)
  hosts: all
  gather_facts: false
  vars_files:
     - ./defaults/main.yml
     - ./defaults/developer.yml
  vars:
    accelerator: false
  tasks:

    - name: "set binance URL endpoint to {{ ba_endpoint }}"
      ansible.builtin.uri:
        url: "{{ ba_api_url }}/endpoint"
        method: POST
        body_format: json
        validate_certs: "{{ ba_validate_certs }}"
        body: "{{ ba_endpoint | to_json }}"
    
    - name: set apikey and apisecret
      ansible.builtin.uri:
        url: "{{ ba_api_url }}/apikey"
        method: POST
        body_format: json
        validate_certs: "{{ ba_validate_certs }}"
        body: "{{ ba_api_key | to_json }}"
      no_log: true

    - name: "get prediction action for coin {{ ba_coin }}"
      ansible.builtin.uri:
        url: "{{ ba_api_url }}/coin_action"
        method: POST
        validate_certs: "{{ ba_validate_certs }}"
        body_format: json
        body: "{{ ba_coin_action | to_json }}"
        return_content: true
      register: _action
    
    - name: "end play if prediction is 'hold'"
      ansible.builtin.meta: end_play
      when: _action.json[ba_coin] == 'Hold' and not dev_sell and not dev_buy

    - name: cache total qty
      ansible.builtin.set_fact:
        cached_total_qty: "{{ total_qty | float }}"
        cached_average: "{{ average | float }}"
    
    - name: "get current price"
      ansible.builtin.uri:
        url: "{{ ba_api_url }}/price"
        body: "{{ ba_coin_buy | to_json }}"
        method: POST
        validate_certs: "{{ ba_validate_certs }}"
        body_format: json
        return_content: true
      register: _current_price

    - name: BUY block
      tags: [buy]
      when: _action.json[ba_coin] == 'Buy' or dev_buy
      block:

      - name: end play if buy price currently to high
        ansible.builtin.meta: end_play
        when: average != 0 and (_current_price.json | float / average | float) * 100 - 100 >= high_buy_limit 

      - name: "calculate buy accelerator"
        ansible.builtin.set_fact:
          ba_usd: "{{ ba_usd * buy_multiplicator }}"
        when: average != 0 and _current_price.json != 0 and 
          (average | float / _current_price.json | float) * 100 - 100 >= low_accelerate_buy_limit
          
      - name: "order if prediction is buy"
        ansible.builtin.uri:
          url: "{{ ba_api_url }}/buy"
          body: "{{ ba_coin_buy | to_json }}"
          method: POST
          validate_certs: "{{ ba_validate_certs }}"
          body_format: json
          return_content: true
        register: _buy
      
      - name: prepare cacheable variables when buy
        ansible.builtin.set_fact:
          last_buy_date: "{{ _buy['date'] }}"
          last_price_buy: "{{ _buy['json']['cummulativeQuoteQty'] | float / _buy['json']['executedQty'] | float }}"
          last_qty_buy:  "{{ _buy['json']['executedQty'] | float }}"
          total_qty: "{{ total_qty | float + _buy['json']['executedQty'] | float }}"
          cacheable: true
      
      - name: compute average when buy
        ansible.builtin.set_fact:
          average: "{{ ( cached_total_qty | float * average | float + last_qty_buy | float * last_price_buy | float) / total_qty | float }}"
          cacheable: true

    - name: SELL block
      tags: [sell]
      when: _action.json[ba_coin] == 'Sell' or dev_sell
      block:

      - name: calculate sell all option
        ansible.builtin.set_fact:
          sell_all: true
        when:  average != 0 and 
          (_current_price.json | float / average | float) * 100 - 100 >= high_sell_limit

      - name: sell all if prediction is sell and high_sell_limit reached
        ansible.builtin.uri:
          url: "{{ ba_api_url }}/sellall"
          body: "{{ ba_coin_buy | to_json }}"
          method: POST
          validate_certs: "{{ ba_validate_certs }}"
          body_format: json
          return_content: true
        register: _sell
        when: sell_all 

      - name: set cacheable variables for sell all
        set_fact:
          average: 0
          total_qty: "{{ cached_total_qty | float - _sell['json']['executedQty'] | float }}"
          last_sell_date: "{{ _sell['date'] }}"
          last_sell_price: "{{ _sell['json']['cummulativeQuoteQty'] | float / _sell['json']['executedQty'] | float }}"
          last_sell_qty: "{{ _sell['json']['executedQty'] }}"
          total_profit: "{{ total_profit | float + ( _sell['json']['cummulativeQuoteQty'] | float - cached_average | float * _sell['json']['executedQty'] | float) }}"
          cacheable: true
        when: sell_all and _sell['content'] != 'empty'
    
      - name: calculate sell part option
        ansible.builtin.set_fact:
          sell_part: true
        when:  average != 0 and not sell_all and
          (_current_price.json | float / average | float) * 100 - 100 >= low_sell_limit 
    
      - name: "order part if prediction is sell"
        ansible.builtin.uri:
          url: "{{ ba_api_url }}/sell"
          body: "{{ ba_coin_buy | to_json }}"
          method: POST
          validate_certs: "{{ ba_validate_certs }}"
          body_format: json
          return_content: true
        register: _sell
        when: sell_part
      
# average untouched because otherwise 
# total_profit calculation is wrong 
      - name: set cacheable variables for sell part
        set_fact:
          total_qty: "{{ cached_total_qty | float - _sell['json']['executedQty'] | float }}"
          last_sell_date: "{{ _sell['date'] }}"
          last_sell_price: "{{ _sell['json']['cummulativeQuoteQty'] | float / _sell['json']['executedQty'] | float }}"
          last_sell_qty: "{{ _sell['json']['executedQty'] }}"
          total_profit: "{{ total_profit | float + ( _sell['json']['cummulativeQuoteQty'] | float - cached_average | float * _sell['json']['executedQty'] | float) }}"
          cacheable: true
        when: sell_part
      
      - name: reset average when total_qty is too low to sell
        ansible.builtin.set_fact:
          average: 0
        when: total_qty | float * _current_price.json | float < min_buy_usd

    # - name: clear api key and secret
    #   ansible.builtin.uri:
    #     url: "{{ ba_api_url }}/clearkey"
    #     method: GET